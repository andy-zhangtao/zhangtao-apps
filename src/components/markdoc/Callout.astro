---
interface Props {
  type?: 'info' | 'warning' | 'error' | 'success';
  title?: string;
}

const { type = 'info', title } = Astro.props;

const typeConfig = {
  info: {
    bg: 'bg-blue-50',
    border: 'border-blue-200',
    icon: 'ℹ️',
    iconBg: 'bg-blue-100',
    iconText: 'text-blue-600',
    titleText: 'text-blue-900',
    contentText: 'text-blue-800'
  },
  warning: {
    bg: 'bg-amber-50',
    border: 'border-amber-200',
    icon: '⚠️',
    iconBg: 'bg-amber-100',
    iconText: 'text-amber-600',
    titleText: 'text-amber-900',
    contentText: 'text-amber-800'
  },
  error: {
    bg: 'bg-red-50',
    border: 'border-red-200',
    icon: '❌',
    iconBg: 'bg-red-100',
    iconText: 'text-red-600',
    titleText: 'text-red-900',
    contentText: 'text-red-800'
  },
  success: {
    bg: 'bg-green-50',
    border: 'border-green-200',
    icon: '✅',
    iconBg: 'bg-green-100',
    iconText: 'text-green-600',
    titleText: 'text-green-900',
    contentText: 'text-green-800'
  }
};

const config = typeConfig[type];
---

<div class={`${config.bg} ${config.border} border rounded-xl p-6 my-6`}>
  <div class="flex items-start space-x-4">
    <div class={`${config.iconBg} ${config.iconText} w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 text-sm`}>
      {config.icon}
    </div>
    <div class="flex-1 min-w-0">
      {title && (
        <h4 class={`${config.titleText} font-semibold text-lg mb-2`}>
          {title}
        </h4>
      )}
      <div class={`${config.contentText} prose prose-sm max-w-none`}>
        <slot />
      </div>
    </div>
  </div>
</div>